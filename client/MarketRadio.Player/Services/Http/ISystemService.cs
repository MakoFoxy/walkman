using System.Net.Http;
using System.Threading.Tasks;
using Player.ClientIntegration.Client;
using Player.ClientIntegration.System;
using Refit;

namespace MarketRadio.Player.Services.Http
{
    public interface ISystemService
    //Этот код определяет интерфейс ISystemService, который предназначен для взаимодействия с HTTP API в контексте .NET приложения, используя библиотеку Refit для создания HTTP-клиентов на основе интерфейсов. Интерфейс ISystemService содержит методы для отправки логов на сервер и получения текущего времени сервера. Вот подробное описание каждого метода:
    {
        [Post("/api/v1/client/send-logs")]//Цель: Отправить логи на сервер для анализа или архивации. Это может быть необходимо для диагностики проблем в работе клиентского приложения или для сбора статистических данных.
        Task<HttpResponseMessage> SendLogsToServer([Body] DownloadLogsResponse response); //    response: Объект DownloadLogsResponse, который предположительно содержит данные логов или ссылку на файл с логами, которые нужно отправить на сервер.
        //    response: Объект DownloadLogsResponse, который предположительно содержит данные логов или ссылку на файл с логами, которые нужно отправить на сервер.
        [Get("/api/v1/client/time")] //Цель: Получить текущее время сервера. Это может быть использовано для синхронизации времени между клиентом и сервером, особенно в приложениях, где точность времени критична.
        Task<CurrentTimeDto> GetServerTime(); //Возвращаемое значение: Task<CurrentTimeDto> — асинхронный таск, который возвращает объект CurrentTimeDto, содержащий текущее время сервера. Этот объект DTO (Data Transfer Object) служит для передачи данных о времени, и его структура не описана в данном фрагменте, но можно предположить, что он содержит дату и время, возможно, в определённом формате.
    }
    //Интерфейс ISystemService можно использовать в любой части .NET приложения, где требуется взаимодействие с системными функциями сервера, такими как отправка логов для диагностики или получение текущего времени сервера. Благодаря использованию Refit, создание и использование HTTP-клиентов становится более простым и удобным, а код — типобезопасным и легко поддерживаемым. Использование такого подхода позволяет разработчикам абстрагироваться от деталей реализации HTTP-запросов и сосредоточиться на более высокоуровневой логике работы с API, упрощая интеграцию с внешними сервисами и улучшая качество кода.
}