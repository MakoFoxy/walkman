using System;
using System.Net.Http;
using System.Threading.Tasks;
using MarketRadio.Player.Models;
using Refit;

namespace MarketRadio.Player.Services.Http
{
    public interface IPlaylistApi
    //Этот код описывает интерфейс IPlaylistApi, используемый для взаимодействия с HTTP API через библиотеку Refit в .NET приложении. Интерфейс предназначен для работы с плейлистами и отправки отчётов о треках. Давайте разберем его подробнее:
    {
        [Get("/api/v1/playlist")]
        Task<PlaylistWrapper> GetPlaylist([Query] Guid objectId, [Query] DateTime date);
        //     GetPlaylist:

        // Цель: Получить плейлист для определённого объекта на конкретную дату.
        // Параметры:
        //     objectId: Идентификатор объекта (например, устройства или пользователя), для которого запрашивается плейлист.
        //     date: Дата, на которую нужно получить плейлист.
        // Атрибуты:
        //     [Query]: Указывает, что параметры метода должны быть переданы в URL как параметры запроса.
        // Возвращаемое значение: Task<PlaylistWrapper>, где PlaylistWrapper — класс, инкапсулирующий данные плейлиста. Эта обёртка предположительно содержит коллекцию треков или ссылок на треки, возможно, с дополнительной метаинформацией.

        [Post("/api/v1/report")]
        Task<HttpContent> SendTrackReport([Body] TrackReport trackReport);

        //         Цель: Отправить отчёт о воспроизведении трека.
        // Параметры:
        //     trackReport: Данные отчёта о треке, который был воспроизведён, включая, вероятно, идентификатор трека, время начала и конца воспроизведения, статус воспроизведения (например, успешно, прервано и т.д.) и другую соответствующую информацию.
        // Атрибуты:
        //     [Body]: Указывает, что параметр trackReport должен быть сериализован и помещён в тело HTTP-запроса.
        // Возвращаемое значение: Task<HttpContent>, где HttpContent может содержать ответ сервера на отправленный отчёт, например, подтверждение получения или результат обработки.
    }
    //     IPlaylistApi можно использовать для разработки сервисов или компонентов внутри .NET приложения, которые требуют взаимодействия с внешними сервисами для получения плейлистов и отправки отчётов о треках. Благодаря использованию Refit, разработчики могут абстрагироваться от низкоуровневых деталей выполнения HTTP-запросов и сосредоточиться на бизнес-логике приложения.

    // Использование типизированных интерфейсов для API-вызовов также способствует улучшению безопасности типов и упрощает поддержку кода, поскольку любые изменения в API могут быть быстро обнаружены и исправлены во время компиляции.
}