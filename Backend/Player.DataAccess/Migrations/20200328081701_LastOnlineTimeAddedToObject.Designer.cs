// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Player.DataAccess;

namespace Player.DataAccess.Migrations
{
    [DbContext(typeof(PlayerContext))]
    [Migration("20200328081701_LastOnlineTimeAddedToObject")]
    partial class LastOnlineTimeAddedToObject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Player.Domain.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Player.Domain.AdHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AdHistories");
                });

            modelBuilder.Entity("Player.Domain.AdLifetime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("InArchive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("AdLifetimes");
                });

            modelBuilder.Entity("Player.Domain.AdTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RepeatCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AdTimes");
                });

            modelBuilder.Entity("Player.Domain.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrackTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvertTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrackTypeId");

                    b.HasIndex("UploaderId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Player.Domain.AdvertPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlockId")
                        .HasColumnType("uuid");

                    b.Property<int>("BlockIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlayingDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("BlockId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("AdvertPlaylists");
                });

            modelBuilder.Entity("Player.Domain.AdvertType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdvertTypes");
                });

            modelBuilder.Entity("Player.Domain.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BlockIndex")
                        .HasColumnType("integer");

                    b.Property<int>("LastAdvertIndex")
                        .HasColumnType("integer");

                    b.Property<int>("LastMusicIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Player.Domain.CheapPlaylistTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("ObjectInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ObjectInfoId");

                    b.ToTable("CheapPlaylistTemplates");
                });

            modelBuilder.Entity("Player.Domain.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bank")
                        .HasColumnType("text");

                    b.Property<string>("Bin")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstPerson")
                        .HasColumnType("text");

                    b.Property<string>("Iik")
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Player.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Player.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Player.Domain.Interval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<Guid?>("ObjectInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrackTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ObjectInfoId");

                    b.HasIndex("TrackTypeId");

                    b.ToTable("Intervals");
                });

            modelBuilder.Entity("Player.Domain.MusicHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("MusicTrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MusicTrackId");

                    b.HasIndex("ObjectId");

                    b.ToTable("MusicHistories");
                });

            modelBuilder.Entity("Player.Domain.MusicTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrackTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TrackTypeId");

                    b.HasIndex("UploaderId");

                    b.ToTable("MusicTracks");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MusicTrackId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MusicTrackId");

                    b.ToTable("MusicTrackGenres");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlockId")
                        .HasColumnType("uuid");

                    b.Property<int>("BlockIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusicTrackId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlayingDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("MusicTrackId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("MusicTrackPlaylists");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusicTrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SelectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MusicTrackId");

                    b.HasIndex("SelectionId");

                    b.ToTable("MusicTrackSelections");
                });

            modelBuilder.Entity("Player.Domain.ObjectInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ActualAddress")
                        .HasColumnType("text");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<int>("Attendance")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("interval");

                    b.Property<string>("Bin")
                        .HasColumnType("text");

                    b.Property<string>("ClientSettings")
                        .HasColumnType("jsonb");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("Geolocation")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastOnlineTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RentersCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ServiceCompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("SilentBlockInterval")
                        .HasColumnType("integer");

                    b.Property<double>("SilentPercent")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ServiceCompanyId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("Player.Domain.ObjectSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SelectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("SelectionId");

                    b.ToTable("ObjectSelections");
                });

            modelBuilder.Entity("Player.Domain.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlayingDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Player.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Player.Domain.RoleRules", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("RoleRules");
                });

            modelBuilder.Entity("Player.Domain.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Player.Domain.Selection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("Player.Domain.ServiceCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceCompanies");
                });

            modelBuilder.Entity("Player.Domain.TrackType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrackTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("225ea1d7-ede3-4733-ba4a-8ed9459f94c6"),
                            Code = "Advert",
                            Name = "Реклама"
                        },
                        new
                        {
                            Id = new Guid("b8b2d657-394e-45a3-9a4d-25ffba47dcaf"),
                            Code = "Music",
                            Name = "Музыка"
                        },
                        new
                        {
                            Id = new Guid("cdd0f07d-e4af-43d3-9a28-3b8674649fe4"),
                            Code = "Silent",
                            Name = "Тишина"
                        });
                });

            modelBuilder.Entity("Player.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<long?>("TelegramChatId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07abf324-2fc7-44fd-ba41-ada305a33c9d"),
                            Email = "system@walkman.org"
                        });
                });

            modelBuilder.Entity("Player.Domain.UserObjects", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ObjectId");

                    b.HasIndex("ObjectId");

                    b.ToTable("UserObjects");
                });

            modelBuilder.Entity("Player.Domain.AdHistory", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("AdHistories")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Player.Domain.AdLifetime", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("AdLifetimes")
                        .HasForeignKey("AdvertId");
                });

            modelBuilder.Entity("Player.Domain.AdTime", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("AdTimes")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.Advert", b =>
                {
                    b.HasOne("Player.Domain.AdvertType", "AdvertType")
                        .WithMany()
                        .HasForeignKey("AdvertTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Domain.TrackType", "TrackType")
                        .WithMany()
                        .HasForeignKey("TrackTypeId");

                    b.HasOne("Player.Domain.User", "Uploader")
                        .WithMany("Adverts")
                        .HasForeignKey("UploaderId");
                });

            modelBuilder.Entity("Player.Domain.AdvertPlaylist", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("Playlists")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Domain.Block", null)
                        .WithMany("Adverts")
                        .HasForeignKey("BlockId");

                    b.HasOne("Player.Domain.Playlist", "Playlist")
                        .WithMany("Aderts")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Player.Domain.Block", b =>
                {
                    b.HasOne("Player.Domain.Playlist", null)
                        .WithMany("Blocks")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("Player.Domain.CheapPlaylistTemplate", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "ObjectInfo")
                        .WithMany()
                        .HasForeignKey("ObjectInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Player.Domain.Image", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany("Images")
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.Interval", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", null)
                        .WithMany("Intervals")
                        .HasForeignKey("ObjectInfoId");

                    b.HasOne("Player.Domain.TrackType", "TrackType")
                        .WithMany()
                        .HasForeignKey("TrackTypeId");
                });

            modelBuilder.Entity("Player.Domain.MusicHistory", b =>
                {
                    b.HasOne("Player.Domain.MusicTrack", "MusicTrack")
                        .WithMany("MusicHistories")
                        .HasForeignKey("MusicTrackId");

                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.MusicTrack", b =>
                {
                    b.HasOne("Player.Domain.TrackType", "TrackType")
                        .WithMany()
                        .HasForeignKey("TrackTypeId");

                    b.HasOne("Player.Domain.User", "Uploader")
                        .WithMany("MusicTracks")
                        .HasForeignKey("UploaderId");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackGenre", b =>
                {
                    b.HasOne("Player.Domain.Genre", "Genre")
                        .WithMany("MusicTracks")
                        .HasForeignKey("GenreId");

                    b.HasOne("Player.Domain.MusicTrack", "MusicTrack")
                        .WithMany("Genres")
                        .HasForeignKey("MusicTrackId");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackPlaylist", b =>
                {
                    b.HasOne("Player.Domain.Block", null)
                        .WithMany("Music")
                        .HasForeignKey("BlockId");

                    b.HasOne("Player.Domain.MusicTrack", "MusicTrack")
                        .WithMany("Playlists")
                        .HasForeignKey("MusicTrackId");

                    b.HasOne("Player.Domain.Playlist", "Playlist")
                        .WithMany("MusicTracks")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackSelection", b =>
                {
                    b.HasOne("Player.Domain.MusicTrack", "MusicTrack")
                        .WithMany("Selections")
                        .HasForeignKey("MusicTrackId");

                    b.HasOne("Player.Domain.Selection", "Selection")
                        .WithMany("MusicTracks")
                        .HasForeignKey("SelectionId");
                });

            modelBuilder.Entity("Player.Domain.ObjectInfo", b =>
                {
                    b.HasOne("Player.Domain.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("Player.Domain.ServiceCompany", "ServiceCompany")
                        .WithMany()
                        .HasForeignKey("ServiceCompanyId");
                });

            modelBuilder.Entity("Player.Domain.ObjectSelection", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany("Selections")
                        .HasForeignKey("ObjectId");

                    b.HasOne("Player.Domain.Selection", "Selection")
                        .WithMany("Objects")
                        .HasForeignKey("SelectionId");
                });

            modelBuilder.Entity("Player.Domain.Playlist", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany("Playlists")
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.RoleRules", b =>
                {
                    b.HasOne("Player.Domain.Role", "Role")
                        .WithMany("Rules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Domain.Rule", "Rule")
                        .WithMany("RoleRuleses")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Player.Domain.User", b =>
                {
                    b.HasOne("Player.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Player.Domain.UserObjects", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player.Domain.User", "User")
                        .WithMany("Objects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
