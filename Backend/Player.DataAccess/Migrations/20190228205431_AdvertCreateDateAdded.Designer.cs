// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Player.DataAccess;

namespace Player.DataAccess.Migrations
{
    [DbContext(typeof(PlayerContext))]
    [Migration("20190228205431_AdvertCreateDateAdded")]
    partial class AdvertCreateDateAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Player.Domain.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Player.Domain.AdHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdvertId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("ObjectId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AdHistories");
                });

            modelBuilder.Entity("Player.Domain.AdLifetime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdvertId");

                    b.Property<DateTime>("DateBegin");

                    b.Property<DateTime>("DateEnd");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("AdLifetimes");
                });

            modelBuilder.Entity("Player.Domain.AdTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdvertId");

                    b.Property<Guid?>("ObjectId");

                    b.Property<DateTime>("PlayDate");

                    b.Property<int>("RepeatCount");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AdTimes");
                });

            modelBuilder.Entity("Player.Domain.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsValid");

                    b.Property<TimeSpan>("Length");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TrackTypeId");

                    b.Property<Guid?>("UploaderId");

                    b.HasKey("Id");

                    b.HasIndex("TrackTypeId");

                    b.HasIndex("UploaderId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Player.Domain.AdvertPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdvertId");

                    b.Property<Guid?>("BlockId");

                    b.Property<int>("BlockIndex");

                    b.Property<DateTime>("PlayingDateTime");

                    b.Property<Guid?>("PlaylistId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("BlockId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("AdvertPlaylists");
                });

            modelBuilder.Entity("Player.Domain.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlockIndex");

                    b.Property<int>("LastAdvertIndex");

                    b.Property<int>("LastMusicIndex");

                    b.Property<Guid?>("PlaylistId");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Player.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsMain");

                    b.Property<Guid?>("ObjectId");

                    b.Property<string>("Path");

                    b.Property<string>("Size")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Player.Domain.Interval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("BeginTime");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<Guid?>("ObjectInfoId");

                    b.Property<Guid?>("TrackTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ObjectInfoId");

                    b.HasIndex("TrackTypeId");

                    b.ToTable("Intervals");
                });

            modelBuilder.Entity("Player.Domain.MusicHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("MusicTrackId");

                    b.Property<Guid?>("ObjectId");

                    b.HasKey("Id");

                    b.HasIndex("MusicTrackId");

                    b.HasIndex("ObjectId");

                    b.ToTable("MusicHistories");
                });

            modelBuilder.Entity("Player.Domain.MusicTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FilePath");

                    b.Property<int>("Index");

                    b.Property<bool>("IsHit");

                    b.Property<bool>("IsValid");

                    b.Property<TimeSpan>("Length");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TrackTypeId");

                    b.Property<Guid?>("UploaderId");

                    b.HasKey("Id");

                    b.HasIndex("TrackTypeId");

                    b.HasIndex("UploaderId");

                    b.ToTable("MusicTracks");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BlockId");

                    b.Property<int>("BlockIndex");

                    b.Property<Guid?>("MusicTrackId");

                    b.Property<DateTime>("PlayingDateTime");

                    b.Property<Guid?>("PlaylistId");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("MusicTrackId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("MusicTrackPlaylists");
                });

            modelBuilder.Entity("Player.Domain.ObjectInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityTypeId");

                    b.Property<string>("ActualAddress");

                    b.Property<double>("Area");

                    b.Property<int>("Attendance");

                    b.Property<TimeSpan>("BeginTime");

                    b.Property<string>("Bin");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("Geolocation");

                    b.Property<string>("LegalAddress");

                    b.Property<string>("Name");

                    b.Property<int>("RentersCount");

                    b.Property<Guid?>("ServiceCompanyId");

                    b.Property<int>("SilentBlockInterval");

                    b.Property<double>("SilentPercent");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ServiceCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("Player.Domain.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ObjectId");

                    b.Property<DateTime>("PlayingDate");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Player.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Player.Domain.RoleRules", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("RuleId");

                    b.HasKey("RoleId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("RoleRules");
                });

            modelBuilder.Entity("Player.Domain.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Player.Domain.ServiceCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceCompanies");
                });

            modelBuilder.Entity("Player.Domain.TrackType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TrackTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("225ea1d7-ede3-4733-ba4a-8ed9459f94c6"),
                            Code = "Advert",
                            Name = "Реклама"
                        },
                        new
                        {
                            Id = new Guid("b8b2d657-394e-45a3-9a4d-25ffba47dcaf"),
                            Code = "Music",
                            Name = "Музыка"
                        },
                        new
                        {
                            Id = new Guid("cdd0f07d-e4af-43d3-9a28-3b8674649fe4"),
                            Code = "Silent",
                            Name = "Тишина"
                        });
                });

            modelBuilder.Entity("Player.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("SecondName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07abf324-2fc7-44fd-ba41-ada305a33c9d"),
                            Email = "system@walkman.org"
                        });
                });

            modelBuilder.Entity("Player.Domain.AdHistory", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("AdHistories")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.AdLifetime", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("AdLifetimes")
                        .HasForeignKey("AdvertId");
                });

            modelBuilder.Entity("Player.Domain.AdTime", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("AdTimes")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.Advert", b =>
                {
                    b.HasOne("Player.Domain.TrackType", "TrackType")
                        .WithMany()
                        .HasForeignKey("TrackTypeId");

                    b.HasOne("Player.Domain.User", "Uploader")
                        .WithMany("Adverts")
                        .HasForeignKey("UploaderId");
                });

            modelBuilder.Entity("Player.Domain.AdvertPlaylist", b =>
                {
                    b.HasOne("Player.Domain.Advert", "Advert")
                        .WithMany("Playlists")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Player.Domain.Block")
                        .WithMany("Adverts")
                        .HasForeignKey("BlockId");

                    b.HasOne("Player.Domain.Playlist", "Playlist")
                        .WithMany("Aderts")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("Player.Domain.Block", b =>
                {
                    b.HasOne("Player.Domain.Playlist")
                        .WithMany("Blocks")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("Player.Domain.Image", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany("Images")
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.Interval", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo")
                        .WithMany("Intervals")
                        .HasForeignKey("ObjectInfoId");

                    b.HasOne("Player.Domain.TrackType", "TrackType")
                        .WithMany()
                        .HasForeignKey("TrackTypeId");
                });

            modelBuilder.Entity("Player.Domain.MusicHistory", b =>
                {
                    b.HasOne("Player.Domain.MusicTrack", "MusicTrack")
                        .WithMany("MusicHistories")
                        .HasForeignKey("MusicTrackId");

                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.MusicTrack", b =>
                {
                    b.HasOne("Player.Domain.TrackType", "TrackType")
                        .WithMany()
                        .HasForeignKey("TrackTypeId");

                    b.HasOne("Player.Domain.User", "Uploader")
                        .WithMany("MusicTracks")
                        .HasForeignKey("UploaderId");
                });

            modelBuilder.Entity("Player.Domain.MusicTrackPlaylist", b =>
                {
                    b.HasOne("Player.Domain.Block")
                        .WithMany("Music")
                        .HasForeignKey("BlockId");

                    b.HasOne("Player.Domain.MusicTrack", "MusicTrack")
                        .WithMany("Playlists")
                        .HasForeignKey("MusicTrackId");

                    b.HasOne("Player.Domain.Playlist", "Playlist")
                        .WithMany("MusicTracks")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("Player.Domain.ObjectInfo", b =>
                {
                    b.HasOne("Player.Domain.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("Player.Domain.ServiceCompany", "ServiceCompany")
                        .WithMany()
                        .HasForeignKey("ServiceCompanyId");

                    b.HasOne("Player.Domain.User")
                        .WithMany("Objects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Player.Domain.Playlist", b =>
                {
                    b.HasOne("Player.Domain.ObjectInfo", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");
                });

            modelBuilder.Entity("Player.Domain.RoleRules", b =>
                {
                    b.HasOne("Player.Domain.Role", "Role")
                        .WithMany("Rules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Player.Domain.Rule", "Rule")
                        .WithMany("RoleRuleses")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Player.Domain.User", b =>
                {
                    b.HasOne("Player.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
