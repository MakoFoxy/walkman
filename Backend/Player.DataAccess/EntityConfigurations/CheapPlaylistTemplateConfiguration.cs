using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Player.Domain;

namespace Player.DataAccess.EntityConfigurations
{
    public class CheapPlaylistTemplateConfiguration : IEntityTypeConfiguration<CheapPlaylistTemplate>
    {
        public void Configure(EntityTypeBuilder<CheapPlaylistTemplate> builder)
        {
            builder.HasKey(e => e.Id);
        }
    }
}

//     Определение сущностей и их свойств: Когда вы создаёте класс сущности в Entity Framework (EF), например AdvertType, вы определяете свойства этого класса, которые EF интерпретирует как столбцы в таблице базы данных. Это основа, на которой EF строит модель данных. Однако по умолчанию EF использует определённые соглашения (conventions) для генерации схемы базы данных из этих классов.

//     Миграции: Когда вы вносите изменения в ваши классы сущностей и затем генерируете миграцию, EF Core анализирует различия между текущей схемой базы данных и структурой ваших сущностей и создаёт код миграции, который изменяет базу данных, чтобы она соответствовала вашему новому определению классов.

//     Настройка с помощью Configure: Метод Configure в классах конфигурации сущностей (реализующих IEntityTypeConfiguration<T>) позволяет переопределить и детализировать эти соглашения. Это может включать в себя настройку ключей, индексов, ограничений и отношений между таблицами, которые не всегда очевидны или не могут быть автоматически выведены из структуры классов. Например, вы можете указать, что поле должно быть индексировано, иметь определённую максимальную длину или быть уникальным.

//     Зачем Configure, если есть миграции?: Метод Configure используется не только для определения начальной схемы базы данных, но и для её последующих изменений. Миграции фиксируют изменения в схеме данных во времени, но базовая конфигурация сущностей определяет, как эти изменения должны быть применены. Более того, конфигурация сущностей позволяет сохранять чистоту и читаемость ваших сущностей, минимизируя количество атрибутов (атрибуты могут быть наглядными, но они могут загромождать классы сущностей, делая их менее читаемыми).

// В итоге, использование Configure вместе с миграциями позволяет вам детально контролировать, как ваша модель данных отображается на схему базы данных, при этом поддерживая возможность отслеживать и применять изменения схемы через миграции. Это создаёт гибкую и мощную систему для управления данными в приложении.