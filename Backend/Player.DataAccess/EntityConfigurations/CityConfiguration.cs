using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Player.Domain;

namespace Player.DataAccess.EntityConfigurations
{
    public class CityConfiguration : IEntityTypeConfiguration<City>
    {
        public void Configure(EntityTypeBuilder<City> builder)
        {
            builder.HasKey(e => e.Id);
            builder.Property(e => e.Name).IsRequired();
        }
    }
}

// В методе Configure класса, реализующего интерфейс IEntityTypeConfiguration<T>, вы можете прописывать не только настройки полей сущности, но и более сложную логику настройки структуры таблицы в базе данных. Вот несколько примеров того, что можно делать в методе Configure:

//     Установка свойств полей: Как вы уже знаете, можно определить, какие поля являются обязательными, их максимальную длину, уникальность и другие атрибуты.

//     Настройка отношений между сущностями: Можно настроить связи между таблицами (один-к-одному, один-ко-многим, многие-ко-многим), включая настройку внешних ключей, каскадного удаления, и других аспектов отношений.

//     Индексация: Можно определять индексы для определенных полей или групп полей для улучшения производительности при запросах к базе данных.

//     Таблицы и схемы: Можно указать название таблицы в базе данных и схему для сущности, если вы хотите отойти от соглашений по умолчанию.

//     Конверсия типов: Можно настроить, как значения свойств сущности конвертируются в типы данных базы данных и обратно, что особенно полезно для нестандартных типов данных.

//     Проверочные ограничения (Check Constraints): Для более сложной валидации данных на уровне базы данных можно определить проверочные ограничения.

//     Настройка идентичности и последовательностей: Для полей, служащих первичными ключами, можно настроить, как будут генерироваться их значения (например, автоинкремент или использование последовательности).

// Важно понимать, что метод Configure предназначен для настройки метаданных модели в контексте Entity Framework и его использование может существенно повлиять на то, как данные будут храниться и обрабатываться в вашей базе данных. Он предоставляет мощные средства для тонкой настройки отображения вашей модели данных на физическую схему базы данных, что может повысить эффективность и производительность вашего приложения.