using System;
using System.Linq;
using FluentValidation;
using Microsoft.EntityFrameworkCore;
using Player.DataAccess;
using Player.Domain;

namespace Player.BusinessLogic.Features.Users.Validators
{
    public class UserUniqueValidator : AbstractValidator<User>
    {
        public UserUniqueValidator(PlayerContext context)
        //Принимает экземпляр PlayerContext, который представляет сессию с базой данных и используется для выполнения запросов.
        {
            RuleFor(u => u)
                .Must(user =>
                {
                    if (user.Id != Guid.Empty)
                    {
                        // TODO Это надо разобрать по хорошему 
                        return true;
                    }

                    var exists = context.Users.Any(u => u.Email.ToLower() == user.Email.ToLower());
                    return !exists;
                })
                .WithMessage(user => $"Пользователь с почтой {user.Email} уже существует");

            //                 Правило валидации:

            //     RuleFor(u => u): Определяет правило валидации для объекта пользователя User.
            //     .Must(user => ...): Условие должно быть истинным, чтобы пользователь прошел валидацию. В данном случае, условие проверяет уникальность почтового адреса пользователя в базе данных.
            //         Если Id пользователя не равен Guid.Empty, предполагается, что это существующий пользователь, и дальнейшая проверка уникальности почты не требуется (return true).
            //         Если это новый пользователь (то есть Id равен Guid.Empty), метод выполняет поиск в базе данных среди всех пользователей (context.Users) на предмет существования пользователя с таким же почтовым адресом (без учета регистра).
            //     .WithMessage(user => $"Пользователь с почтой {user.Email} уже существует"): Определяет сообщение об ошибке, если правило не было соблюдено.

            // Общий процесс валидации:

            //     Создается запрос на проверку пользователя.
            //     Производится проверка уникальности почтового адреса пользователя. Если почтовый адрес уже существует в базе данных (и это новый пользователь), валидация не пройдена.
            //     Если правило нарушено, возвращает соответствующее сообщение об ошибке.

            // Этот механизм валидации помогает предотвратить создание нескольких пользователей с одинаковыми почтовыми адресами, что важно для поддержания целостности данных и безопасности системы.
        }
    }
}