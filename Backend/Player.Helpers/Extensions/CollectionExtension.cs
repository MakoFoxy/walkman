using System;
using System.Collections.Generic;

namespace Player.Helpers.Extensions
{
    public static class CollectionExtension
    {
        //    Это статический класс, что является требованием для всех методов расширения в C#. Методы расширения позволяют добавлять новые методы к существующим типам без изменения их кода.
        public static ICollection<T> Randomize<T>(this IEnumerable<T> collection)
        {
            var list = new List<T>(collection);

            var random = new Random();

            var n = list.Count;
            while (n > 1)
            {
                n--;
                var k = random.Next(n + 1);
                var value = list[k];
                list[k] = list[n];
                list[n] = value;
            }

            return list;

            //Метод Randomize:

            // Это метод расширения для типов, реализующих IEnumerable<T>, что указывается с помощью ключевого слова this перед первым параметром метода.
            // Метод создает новый список List<T> из переданной коллекции. Это делается для обеспечения возможности индексированного доступа к элементам, поскольку IEnumerable<T> по умолчанию такой возможности не предоставляет.
            // В методе используется алгоритм Фишера — Йетса для случайного перемешивания элементов списка. Это делается путем последовательного прохода списка с конца и обмена каждого элемента с случайно выбранным элементом, который находится перед ним или на его позиции. Алгоритм гарантирует, что каждый элемент может оказаться на любой позиции с одинаковой вероятностью.
            // Random random = new Random(); создает новый экземпляр генератора случайных чисел, который используется для выбора случайного индекса элемента в списке.
            // Возвращаемое значение — перемешанный список List<T>.
        }
    }
}


// AutoMapperProfile в случае с плейлистом делает временые блоки реклам, а с CollectionExtension  в целом все треки перемешиваются 
// ChatGPT

// Да, вы правильно описали различие между использованием AutoMapperProfile и CollectionExtension в вашем контексте:
// AutoMapperProfile для плейлистов:

//     В вашем AutoMapperProfile, конфигурация для Advert в AdvertModel включает логику обработки временных интервалов рекламы (через AdLifetimes). Она устанавливает FromDate и ToDate для AdvertModel, используя соответственно минимальную и максимальную даты из временных блоков AdLifetimes, ассоциированных с каждым рекламным объявлением. Это позволяет определить временной диапазон, когда реклама должна быть активной.
//     Также происходит маппинг объектов, связанных с временами показа рекламы (AdTimes), на коллекцию SimpleDto, которая содержит идентификаторы и названия объектов. Это используется для отображения, какие объекты (в контексте, возможно, плейлисты или места показа) связаны с данной рекламой.
//     Дополнительно, происходит преобразование длительности рекламы из TimeSpan в секунды для использования в модели.

// CollectionExtension для треков:

//     CollectionExtension содержит метод Randomize, который принимает коллекцию треков (или любых других объектов) и возвращает новый список этих объектов, но в случайном порядке. Это достигается путем использования алгоритма Фишера — Йетса для перемешивания.
//     Этот метод можно использовать для создания случайного плейлиста из заданного списка треков, гарантируя, что порядок воспроизведения не будет одинаковым каждый раз.

// Отличия:

//     Назначение: AutoMapperProfile используется для маппинга данных между разными типами объектов, управляя специфическими аспектами рекламных объявлений и их временных рамок. CollectionExtension, с другой стороны, предназначен для общих операций над коллекциями, таких как перемешивание элементов.
//     Контекст использования: AutoMapperProfile применяется в контексте подготовки данных для взаимодействия с пользовательским интерфейсом или другими частями системы, где требуются специфические форматы данных. Randomize из CollectionExtension применяется для изменения порядка коллекций в более общих сценариях, например, для создания вариативности в плейлистах или выводе элементов.

// Оба эти подхода служат разным целям и вместе улучшают гибкость и функциональность вашего приложения.