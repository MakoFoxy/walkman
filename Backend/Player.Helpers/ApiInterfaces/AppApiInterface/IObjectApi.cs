using System;
using System.Threading.Tasks;
using Player.DTOs;
using Refit;

namespace Player.Helpers.ApiInterfaces.AppApiInterface
{
    public interface IObjectApi
    {
        [Get("/api/v1/object/{id}")]
        Task<ObjectDto> GetObject([AliasAs("id")] Guid id, [Header("Authorization")] string bearerToken);
    }
}

//     Аннотация [Get("/api/v1/object/{id}")]: Определяет HTTP GET запрос к ресурсу /api/v1/object/{id}. {id} является местозаполнителем для идентификатора объекта, который будет вставлен в URL.
//     Параметр метода ([AliasAs("id")] Guid id): Указывает, что значение, передаваемое в этот параметр, должно быть вставлено в URL вместо {id}. Guid используется как тип идентификатора, что является общим выбором для уникальных идентификаторов в системах.
//     Параметр ([Header("Authorization")] string bearerToken): Определяет, что строка bearerToken должна быть добавлена в заголовки HTTP-запроса как заголовок авторизации. Это стандартный способ отправки токена доступа для аутентификации и авторизации в REST API.
//     Task<ObjectDto>: Метод асинхронный, что указывает на то, что вызов API потенциально может быть длительным операцией. Возвращаемый тип ObjectDto представляет структуру данных, которую вы ожидаете получить в ответе от API.

// Использование Refit упрощает процесс создания клиентов для RESTful API, автоматически преобразуя интерфейс в live-клиент, способный выполнять HTTP-запросы и обрабатывать ответы. В вашем случае, IObjectApi может быть использован для создания клиента API, который затем можно использовать для запроса данных объектов из внешнего сервиса.